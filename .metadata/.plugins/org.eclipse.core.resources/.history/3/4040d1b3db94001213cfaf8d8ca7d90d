
import java.io.InputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Queue;
import java.util.Scanner;

import javax.crypto.*;

import csec2013.*;

import java.security.AlgorithmParameterGenerator;
import java.security.AlgorithmParameters;
import java.security.InvalidKeyException;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.PublicKey;
import java.security.Security;
import java.security.Provider;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.X509EncodedKeySpec;

public class Chat {
	private AlgorithmParameters params;
	private Provider prov;
	private KeyAgreement keyAgree;
	
    public static void main(String[] args) {
	parseArgs(new ArrayDeque<String>(Arrays.asList(args)));
	Socket c = null;
	if (mode == SERVER) {
	    try {
		ServerSocket s = new ServerSocket(port);
		c = s.accept();
	    } catch (IOException e) {
		System.err.println("There was an error opening the server:");
		System.err.println(e);
		System.exit(-3);
	    } catch (SecurityException e) {
		System.err.println("You are not allowed to open the server:");
		System.err.println(e);
		System.exit(-2);
	    } catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (InvalidKeySpecException e) {
			e.printStackTrace();
		}
	} else if (mode == CLIENT) {
	    try {
		c = new Socket(addr, port);
		InputStream in = c.getInputStream();
		OutputStream out = c.getOutputStream();
		//get encoded parameters from server
		byte[] sParams = new byte[1024];
		in.read(sParams);
		System.out.println("Received initial parameters...");
		AlgorithmParameters ap = null;
		try {
			ap = AlgorithmParameters.getInstance("DH");
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		}
		ap.init(sParams);
		System.out.println("Decoded initial parameters...");
		
		
	    } catch (IOException e) {
		System.err.println("There was an error connecting:");
		System.err.println(e);
		System.exit(-3);
	    } catch (SecurityException e) {
		System.err.println("You are not allowed to connect:");
		System.err.println(e);
		System.exit(-2);
	    }
	} else {
	    System.err.println("Please specify the mode.");
	    printUsage();
	    System.exit(-1);
	}
	try {
	    new Thread(new ChatSender(System.in, c.getOutputStream())).start();
	    new Thread(new ChatReceiver(c.getInputStream(), System.out)).start();
	} catch (IOException e) {
	    System.err.println("There was an error setting up data transfer:");
	    System.err.println(e);
	    System.exit(-3);
	}
    }
    private static void parseArgs(Queue<String> args) {
	while (args.peek() != null) {
	    String opt = args.poll();
	    if (opt.equals("-s")) {
		if (mode != UNSPECIFIED) {
		    printUsage();
		    System.exit(-1);
		}
		mode = SERVER;
		parsePort(args);
	    } else if (opt.equals("-c")) {
		if (mode != UNSPECIFIED) {
		    printUsage();
		    System.exit(-1);
		}
		mode = CLIENT;
		parseAddr(args);
		parsePort(args);
	    }
	}
    }
    private static void badPort() {
	System.err.println("Please specify a port between 1 and 65535.");
	printUsage();
	System.exit(-1);
    }
    private static void parsePort(Queue<String> args) {
	String strPort = args.poll();
	if (strPort == null) {
	    badPort();
	}
	try {
	    port = Integer.parseInt(strPort);
	} catch (NumberFormatException e) {
	    badPort();
	}
	if (!(1 <= port && port <= 65535)) {
	    badPort();
	}
    }
    private static void badAddr() {
	System.err.println("Please specify an IP address or host name.");
	printUsage();
	System.exit(-1);
    }
    private static void parseAddr(Queue<String> args) {
	String hostname = args.poll();
	if (hostname == null) {
	    badAddr();
	}
	try {
	    addr = InetAddress.getByName(hostname);
	} catch (UnknownHostException e) {
	    System.err.println("The address '" + hostname + "' is unrecognized or could not be resolved.");
	    badAddr();
	} catch (SecurityException e) {
	    System.err.println("You are not allowed to resolve '" + hostname + "'.");
	    System.exit(-2);
	}
    }
    private static void printUsage() {
	System.err.println("Usage:");
	System.err.println("    java Chat -s PORT");
	System.err.println("    invokes Chat in server mode attempting to listen on PORT.");
	System.err.println("");
	System.err.println("    java Chat -c ADDRESS PORT");
	System.err.println("    invokes Chat in client mode attempting to connect to ADDRESS on PORT.");
    }
    
    private void serverKeySetup(Socket c) {
    	try {
    		//create the provider
    		prov = new CSec2012Prov();
    		//insert the provider at position 1 (highest priority)
    		Security.insertProviderAt(prov, 1);
    		//generate the generator
    		System.out.println("Generating inital parameters...");
    		AlgorithmParameterGenerator gen = AlgorithmParameterGenerator.getInstance("DH");
    		//set the size
    		gen.init(1024);
    		//generate the paramenters for Diffie-Hellman
   			params = gen.generateParameters();
    		//send the encoded parameters
    		System.out.println("Sending initial parameters...");
    		InputStream in = c.getInputStream();
   			OutputStream out = c.getOutputStream();
   			out.write(params.getEncoded());
    		//generate DH keys
    		KeyPairGenerator keyGen = KeyPairGenerator.getInstance("DH");
    		KeyPair keys = keyGen.genKeyPair();
   			//send public key
   			System.out.println("Sending encoded public key...");
   			out.write(keys.getPublic().getEncoded());
   			
    		//get other side's client key
    		byte[] pKey = new byte[1024];
    		in.read(pKey);
   			//decode the key using KeyFactory
   			System.out.println("Decoding other side's public key...");
    		X509EncodedKeySpec pubKeySpec = new X509EncodedKeySpec(pKey);
    		KeyFactory fact = KeyFactory.getInstance("DH");
    		PublicKey pubKey = fact.generatePublic(pubKeySpec);

   			//create KeyAgreement
    		System.out.println("Creating KeyAgreement...");
   			keyAgree = KeyAgreement.getInstance("DH");
   			keyAgree.init(keys.getPrivate()); //add private key
   		    keyAgree.doPhase(pubKey, true); //add other public key
   			
    	} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (InvalidKeySpecException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (InvalidKeyException e) {
			e.printStackTrace();
		} catch (IllegalStateException e) {
			e.printStackTrace();
		}
    }

    private static final byte UNSPECIFIED = 0;
    private static final byte SERVER = 1;
    private static final byte CLIENT = 2;

    private static byte mode = UNSPECIFIED;
    private static InetAddress addr = null;
    private static int port = 0;
}

class ChatSender implements Runnable {
    public ChatSender(InputStream screen, OutputStream conn) {
	this.screen = new Scanner(screen);
	this.conn = new PrintStream(conn);
	//send encoded parameters

	
    }
    public void run() {
	while (true) {
	    String line = screen.nextLine();
	    conn.println(line);
	}
    }

    private Scanner screen;
    private PrintStream conn;
}

class ChatReceiver implements Runnable {
    public ChatReceiver(InputStream conn, OutputStream screen) {
	this.conn = conn;
	this.screen = screen;
    }
    public void run() {
	byte[] b = new byte[1024];
	while (true) {
	    try {
		int len = conn.read(b);
		if (len == -1) break;
		screen.write(b, 0, len);
	    } catch (IOException e) {
		System.err.println("There was an error receiving data:");
		System.err.println(e);
	    }
	}
    }

    private InputStream conn;
    private OutputStream screen;
}
